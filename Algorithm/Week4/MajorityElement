using System;
using System.Linq;

namespace Week4
{
    class MajorityElement
    {
        static void Main(string[] args)
        {
            int n = int.Parse(Console.ReadLine());
            string[] secondLine = Console.ReadLine().Split();

            long[] values = new long[n];


            for (int i = 0; i < n; i++)
            {
                values[i] = long.Parse(secondLine[i]);
            }

            var sortedValues = values.OrderBy(x => x);
            Console.WriteLine(GetResult(sortedValues.ToArray()));
        }

        static int GetResult(long[] array)
        {
            int length = array.Length;
            if (length == 1) return 1;
            int lengthToCheck = length % 2 == 0 ? length / 2 : (length / 2) + 1;
            for (var i = 0; i < lengthToCheck; i++)
            {
                if (array[i] == array[i + length / 2])
                {
                    return 1;
                }
            }

            return 0;
        }

        static int BinarySearchIterative(long[] inputArray, long key, int min, int max)
        {
            if (min > max)
            {
                return -1;
            }
            while (min <= max)
            {
                int mid = (min + max) / 2;
                if (key == inputArray[mid])
                {
                    return mid;
                }
                if (key < inputArray[mid])
                {
                    max = mid - 1;
                }
                else
                {
                    min = mid + 1;
                }
            }
            return -1;
        }
        static int BinarySearchRecursive(long[] inputArray, long key, int min, int max)
        {
            if (min > max || inputArray.Length == 0)
            {
                return -1;
            }
            int mid = (min + max) / 2;
            if (key == inputArray[mid])
            {
                return mid;
            }
            if (key < inputArray[mid])
            {
                return BinarySearchRecursive(inputArray, key, min, mid - 1);
            }
            return BinarySearchRecursive(inputArray, key, mid + 1, max);
        }
    }
}
