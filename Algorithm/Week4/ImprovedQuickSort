using System;

namespace Exercises
{
    class ImprovedQuickSort
    {
       private static Random _random = new Random();
        static void Main(string[] args)
        {
            var n = int.Parse(Console.ReadLine());
            var secondLine = Console.ReadLine().Split();
            int[] array = new int[n];
            for (int i = 0; i < n; i++)
            {
                array[i] = int.Parse(secondLine[i]);
            }

            Partition3(array, 0, n - 1);

            Console.WriteLine(string.Join(" ", array));
        }

        private static void RandomizedQuickSort(int[] a, int l, int r)
        {
            if (l >= r)
            {
                return;
            }
            int k = _random.Next(r - l + 1) + l;
            Swap(ref a[l], ref a[k]);

            //partition3
            int m = Partition2(a, l, r);
            RandomizedQuickSort(a, l, m - 1);
            RandomizedQuickSort(a, m + 1, r);

        }
        private static int Partition2(int[] a, int l, int r)
        {
            int x = a[l];
            int j = l;
            for (int i = l + 1; i <= r; i++)
            {
                if (a[i] <= x)
                {
                    j++;
                    Swap(ref a[i], ref a[j]);
                }
            }
            Swap(ref a[l], ref a[j]);
            return j;
        }
        private static void Partition3(int[] a, int l, int r)
        {
            if(r <= l)
            {
                return;
            }
            int lt = l;
            int gt = r;
            int x = a[l];
            int i = l + 1;
            var pivot = a[l];
            while(i <= gt)
            {
                var diff = a[i] - pivot;
                if(diff < 0)
                {
                    Swap(ref a[lt++], ref a[i++]);
                }
                else if(diff > 0)
                {
                    Swap(ref a[i], ref a[gt--]);
                }
                else
                {
                    i++;
                }
            }
            Partition3(a, l, lt - 1);
            Partition3(a, gt+1, r);
        }
        private static void Swap(ref int x, ref int y)
        {
            int temp = x;
            x = y;
            y = temp;
        }
    }
}
