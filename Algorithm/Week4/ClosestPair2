using System;
using System.Collections.Generic;
using System.Linq;

namespace Week4
{
    class ClosestPair2
    {
        static void Main(string[] args)

        {
            var n = int.Parse(Console.ReadLine());
            var points = new List<Point>();
            for (var i = 0; i < n; i++)
            {
                var pointsInput = Console.ReadLine().Split();
                points.Add(new Point {X = int.Parse(pointsInput[0]), Y = int.Parse(pointsInput[1])});
            }

            var result = ClosestSegment(points.OrderBy(p => p.X).ToList());
            Console.WriteLine(result.DistanceBetween());
        }

        static Segment ClosestBruteForce(IReadOnlyList<Point> points)
        {
            var n = points.Count;
            var result = Enumerable.Range(0, n - 1)
                .SelectMany(i => Enumerable.Range(i + 1, n - (i + 1))
                    .Select(j => new Segment(points[i], points[j])))
                .OrderBy(seg => seg.LengthSquared())
                .First();

            return result;
        }

        private static Segment ClosestSegment(IReadOnlyList<Point> pointsByX)
        {
            var count = pointsByX.Count;
            if (count <= 4)
            {
                return ClosestBruteForce(pointsByX);
            }

            var leftByX = pointsByX.Take(count / 2).ToList();
            var leftResult = ClosestSegment(leftByX);

            var rightByX = pointsByX.Skip(count / 2).ToList();
            var rightResult = ClosestSegment(rightByX);

            var result = rightResult.DistanceBetween() < leftResult.DistanceBetween() ? rightResult : leftResult;

            var midX = leftByX.Last().X;
            var distanceBetween = result.DistanceBetween();
            var inBandByX = pointsByX.Where(p => Math.Abs(midX - p.X) <= distanceBetween);

            var inBandByY = inBandByX.OrderBy(p => p.Y).ToArray();

            var iLast = inBandByY.Length - 1;
            for (var i = 0; i < iLast; i++)
            {
                var pLower = inBandByY[i];

                for (var j = i + 1; j <= iLast; j++)
                {
                    var pUpper = inBandByY[j];

                    if (pUpper.Y - pLower.Y >= result.DistanceBetween())
                    {
                        break;
                    }

                    if (Segment.DistanceBetween(pLower, pUpper) < result.DistanceBetween())
                    {
                        result = new Segment(pLower, pUpper);
                    }
                }
            }

            return result;
        }

        class Segment
        {
            public Segment(Point p1, Point p2)
            {
                _p1 = p1;
                _p2 = p2;
            }

            private readonly Point _p1;
            private readonly Point _p2;

            public float DistanceBetween()
            {
                return DistanceBetween(_p1, _p2);
            }
            public static float DistanceBetween(Point p1, Point p2)
            {
                double a = p1.X - p2.X;
                double b = p1.Y - p2.Y;
                return (float) Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2));
            }

            public float LengthSquared()
            {
                return (_p1.X - _p2.X) * (_p1.X - _p2.X) + (_p1.Y - _p2.Y) * (_p1.Y - _p2.Y);
            }
        }

        private class Point
        {
            public int X { get; set; }
            public int Y { get; set; }
        }
    }
}
